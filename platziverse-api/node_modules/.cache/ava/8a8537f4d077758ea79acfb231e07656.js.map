{"version":3,"sources":["tests/api-tests.js"],"names":["test","require","request","sinon","proxyquire","agentFixtures","metricFixtures","sandbox","server","dbStub","AgentStub","MetricStub","uuid","wrongUuid","type","beforeEach","createSandbox","stub","returns","Promise","resolve","Agent","Metric","findConnected","connected","findByUuid","withArgs","byUuid","findByAgentUuid","findByTypeAgentUuid","api","afterEach","restore","serial","cb","t","get","expect","end","err","res","falsy","body","JSON","stringify","expected","deepEqual","console","log","truthy","error","regex"],"mappings":"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","sourceRoot":"/home/juancho/Documentos/platzi/platziverse/platziverse-api","sourcesContent":["'use strict';\n\nconst test = require('ava');\nconst request = require('supertest');\nconst sinon = require('sinon');\nconst proxyquire = require('proxyquire');\n\nconst agentFixtures = require('./fixtures/agent');\nconst metricFixtures = require('./fixtures/metric');\n\nlet sandbox = null;\nlet server = null;\nlet dbStub = null;\nlet AgentStub = {};\nlet MetricStub = {};\nconst uuid = 'yyy-yyy-yyy';\nconst wrongUuid = 'xxx-yyy-yyy';\nconst type = 'CPU';\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox();\n\n  dbStub = sandbox.stub();\n  dbStub.returns(Promise.resolve({\n    Agent: AgentStub,\n    Metric: MetricStub\n  }));\n\n  AgentStub.findConnected = sandbox.stub();\n  AgentStub.findConnected.returns(Promise.resolve(agentFixtures.connected));\n\n  AgentStub.findByUuid = sandbox.stub();\n  AgentStub.findByUuid.withArgs(uuid).returns(Promise.resolve(agentFixtures.byUuid(uuid)));\n  AgentStub.findByUuid.withArgs(wrongUuid).returns(Promise.resolve(null));\n\n  MetricStub.findByAgentUuid = sandbox.stub();\n  MetricStub.findByAgentUuid.withArgs(uuid).returns(Promise.resolve(metricFixtures.findByAgentUuid(uuid)));\n  MetricStub.findByAgentUuid.withArgs(wrongUuid).returns(Promise.resolve(null));\n\n  MetricStub.findByTypeAgentUuid = sandbox.stub();\n  MetricStub.findByTypeAgentUuid.withArgs(type, uuid).returns(Promise.resolve(metricFixtures.findByTypeAgentUuid(type, uuid)));\n  MetricStub.findByTypeAgentUuid.withArgs(type, wrongUuid).returns(Promise.resolve(null));\n\n  const api = proxyquire('../api', {\n    'platziverse-db': dbStub\n  });\n\n  server = proxyquire('../server', {\n    './api': api\n  });\n});\n\ntest.afterEach(async () => {\n  sandbox && sinon.restore();\n});\n\ntest.serial.cb('/api/agents', t => {\n  request(server)\n    .get('/api/agents')\n    .expect(200)\n    .expect('Content-Type', /json/)\n    .end((err, res) => {\n      t.falsy(err, 'should not return an error');\n      let body = JSON.stringify(res.body);\n      let expected = JSON.stringify(agentFixtures.connected);\n      t.deepEqual(body, expected, 'response body should be the expected');\n      t.end();\n    });\n});\n\ntest.serial.cb('/api/agent/:uuid', t => {\n  request(server)\n    .get(`/api/agent/${uuid}`)\n    .expect(200)\n    .expect('Content-Type', /json/)\n    .end((err, res) => {\n      t.falsy(err, 'should not return an error');\n      let body = JSON.stringify(res.body);\n      let expected = JSON.stringify(agentFixtures.byUuid(uuid));\n      t.deepEqual(body, expected, 'response body should be the expected');\n      t.end();\n    });\n});\n\ntest.serial.cb('/api/agent/:uuid - not found', t => {\n  request(server)\n    .get(`/api/agent/${wrongUuid}`)\n    .expect(404)\n    .expect('Content-Type', /json/)\n    .end((err, res) => {\n      if (err) {\n        console.log(err);\n      }\n      t.truthy(res.body.error, 'should return an error');\n      t.regex(res.body.error, /not found/, 'Error should contains not found');\n      t.end();\n    });\n});\n\ntest.serial.cb('/api/metrics/:uuid', t => {\n  request(server)\n    .get(`/api/metrics/${uuid}`)\n    .expect(200)\n    .expect('Content-Type', /json/)\n    .end((err, res) => {\n      t.falsy(err, 'should not return an error');\n      let body = JSON.stringify(res.body);\n      let expected = JSON.stringify(metricFixtures.findByAgentUuid(uuid));\n      t.deepEqual(body, expected, 'response body should be the expected');\n      t.end();\n    });\n});\n\ntest.serial.cb('/api/metrics/:uuid - not found', t => {\n  request(server)\n    .get(`/api/metrics/${wrongUuid}`)\n    .expect(404)\n    .expect('Content-Type', /json/)\n    .end((err, res) => {\n      if (err) {\n        console.log(err);\n      }\n      t.truthy(res.body.error, 'should return an error');\n      t.regex(res.body.error, /not found/, 'Error should contains not found');\n      t.end();\n    });\n});\n\ntest.serial.cb('/api/metrics/:uuid/:type', t => {\n  request(server)\n    .get(`/api/metrics/${uuid}/${type}`)\n    .expect(200)\n    .expect('Content-Type', /json/)\n    .end((err, res) => {\n      t.falsy(err, 'should not return an error');\n      let body = JSON.stringify(res.body);\n      let expected = JSON.stringify(metricFixtures.findByTypeAgentUuid(type, uuid));\n      t.deepEqual(body, expected, 'response body should be the expected');\n      t.end();\n    });\n});\n\ntest.serial.cb('/api/metrics/:uuid/:type - not found', t => {\n  request(server)\n    .get(`/api/metrics/${wrongUuid}/${type}`)\n    .expect(404)\n    .expect('Content-Type', /json/)\n    .end((err, res) => {\n      if (err) {\n        console.log(err);\n      }\n      t.truthy(res.body.error, 'should return an error');\n      t.regex(res.body.error, /not found/, 'Error should contains not found');\n      t.end();\n    });\n});\n"]}