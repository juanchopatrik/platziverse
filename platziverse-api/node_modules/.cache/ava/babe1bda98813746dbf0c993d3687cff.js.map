{"version":3,"sources":["tests/api-tests.js"],"names":["test","require","request","sinon","proxyquire","agentFixtures","sandbox","server","dbStub","AgentStub","UuIdStub","MetricStub","uuid","uuidArgs","where","beforeEach","createSandbox","stub","returns","Promise","resolve","Agent","Metric","findConnected","connected","findOne","withArgs","byUuid","api","afterEach","restore","serial","cb","t","get","expect","end","err","res","falsy","body","JSON","stringify","expected","deepEqual","todo"],"mappings":"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","sourceRoot":"/home/juancho/Documentos/platzi/platziverse/platziverse-api","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst request = require('supertest')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst agentFixtures = require('./fixtures/agent')\n\nlet sandbox = null\nlet server = null\nlet dbStub = null\nlet AgentStub = {}\nlet UuIdStub ={}\nlet MetricStub = {}\nlet uuid = 'yyy-yyy-yyy'\n\nlet uuidArgs = {\n    where : {uuid}\n  }\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  dbStub = sandbox.stub()\n  dbStub.returns(Promise.resolve({\n    Agent: AgentStub,\n    Metric: MetricStub,\n  }))\n\n  AgentStub.findConnected = sandbox.stub()\n  AgentStub.findConnected.returns(Promise.resolve(agentFixtures.connected))\n\n  AgentStub.findOne= sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n\n\n  const api = proxyquire('../api', {\n    'platziverse-db': dbStub\n  })\n\n  server = proxyquire('../server', {\n    './api': api\n  })\n})\n\ntest.afterEach(() => {\n  sandbox && sinon.restore()\n})\n\ntest.serial.cb('/api/agents', t => {\n  request(server)\n    .get('/api/agents')\n    .expect(200)\n    .expect('Content-Type', /json/)\n    .end((err, res) => {\n      t.falsy(err, 'should not return an error')\n      let body = JSON.stringify(res.body)\n      let expected = JSON.stringify(agentFixtures.connected)\n      t.deepEqual(body, expected, 'response body should be the expected')\n      t.end()\n    })\n})\n\n\n\ntest.serial.cb('/api/agents/:uuid', t => {\n    request(server)\n      .get(`/api/agents/${uuidArgs}`)\n      .expect(200)\n      .expect('Content-Type', /json/)\n      .end((err, res) => {\n        t.falsy(err, 'should not return an error')\n        let body = JSON.stringify(res.body)\n        let expected = JSON.stringify(agentFixtures.byUuid)\n        t.deepEqual(body, expected, 'response body should be the expected')\n        t.end()\n      })\n  })\ntest.serial.todo('/api/agent/:uuid - not found')\n\ntest.serial.todo('/api/metrics/:uuid')\ntest.serial.todo('/api/metrics/:uuid - not found')\n\ntest.serial.todo('/api/metrics/:uuid/:type')\ntest.serial.todo('/api/metrics/:uuid/:type - not found')"]}