{"version":3,"sources":["tests/api-tests.js"],"names":["test","require","util","request","sinon","proxyquire","agentFixtures","config","auth","sign","promisify","sandbox","server","dbStub","AgentStub","token","MetricStub","uuid","beforeEach","createSandbox","stub","returns","Promise","resolve","Agent","Metric","findConnected","connected","findByUuid","withArgs","byUuid","admin","username","secret","api","afterEach","restore","serial","cb","t","get","set","expect","end","err","res","falsy","body","JSON","stringify","expected","deepEqual","todo"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAE,MAAF,CAApB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMI,UAAU,GAAGJ,OAAO,CAAC,YAAD,CAA1B;;AAEA,MAAMK,aAAa,GAAGL,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAE,WAAF,CAAtB;;AACA,MAAMO,IAAI,GAAGP,OAAO,CAAE,SAAF,CAApB;;AACA,MAAMQ,IAAI,GAAGP,IAAI,CAACQ,SAAL,CAAeF,IAAI,CAACC,IAApB,CAAb;AAEA,IAAIE,OAAO,GAAG,IAAd;AACA,IAAIC,MAAM,GAAG,IAAb;AACA,IAAIC,MAAM,GAAG,IAAb;AACA,IAAIC,SAAS,GAAG,EAAhB;AACA,IAAIC,KAAK,GAAG,EAAZ;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,MAAMC,IAAI,GAAG,aAAb;AAEAjB,IAAI,CAACkB,UAAL,CAAgB,YAAY;AAC1BP,EAAAA,OAAO,GAAGP,KAAK,CAACe,aAAN,EAAV;AAEAN,EAAAA,MAAM,GAAGF,OAAO,CAACS,IAAR,EAAT;AACAP,EAAAA,MAAM,CAACQ,OAAP,CAAeC,OAAO,CAACC,OAAR,CAAgB;AAC7BC,IAAAA,KAAK,EAAEV,SADsB;AAE7BW,IAAAA,MAAM,EAAET;AAFqB,GAAhB,CAAf;AAKAF,EAAAA,SAAS,CAACY,aAAV,GAA0Bf,OAAO,CAACS,IAAR,EAA1B;AACAN,EAAAA,SAAS,CAACY,aAAV,CAAwBL,OAAxB,CAAgCC,OAAO,CAACC,OAAR,CAAgBjB,aAAa,CAACqB,SAA9B,CAAhC;AAEAb,EAAAA,SAAS,CAACc,UAAV,GAAsBjB,OAAO,CAACS,IAAR,EAAtB;AACAN,EAAAA,SAAS,CAACc,UAAV,CAAqBC,QAArB,CAA8BZ,IAA9B,EAAoCI,OAApC,CAA4CC,OAAO,CAACC,OAAR,CAAgBjB,aAAa,CAACwB,MAAd,CAAqBb,IAArB,CAAhB,CAA5C;AAEAF,EAAAA,KAAK,GAAG,MAAMN,IAAI,CAAC;AAAEsB,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,QAAQ,EAAE;AAAzB,GAAD,EAAqCzB,MAAM,CAACC,IAAP,CAAYyB,MAAjD,CAAlB;AAEA,QAAMC,GAAG,GAAG7B,UAAU,CAAC,QAAD,EAAW;AAC/B,sBAAkBQ;AADa,GAAX,CAAtB;AAIAD,EAAAA,MAAM,GAAGP,UAAU,CAAC,WAAD,EAAc;AAC/B,aAAS6B;AADsB,GAAd,CAAnB;AAGD,CAxBD;AA0BAlC,IAAI,CAACmC,SAAL,CAAe,MAAM;AACnBxB,EAAAA,OAAO,IAAIP,KAAK,CAACgC,OAAN,EAAX;AACD,CAFD;AAIApC,IAAI,CAACqC,MAAL,CAAYC,EAAZ,CAAe,aAAf,EAA8BC,CAAC,IAAI;AACjCpC,EAAAA,OAAO,CAACS,MAAD,CAAP,CACG4B,GADH,CACO,aADP,EAEGC,GAFH,CAEO,eAFP,EAEyB,UAAS1B,KAAM,EAFxC,EAGG2B,MAHH,CAGU,GAHV,EAIGA,MAJH,CAIU,cAJV,EAI0B,MAJ1B,EAKGC,GALH,CAKO,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjBN,IAAAA,CAAC,CAACO,KAAF,CAAQF,GAAR,EAAa,4BAAb;AACA,QAAIG,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeJ,GAAG,CAACE,IAAnB,CAAX;AACA,QAAIG,QAAQ,GAAGF,IAAI,CAACC,SAAL,CAAe3C,aAAa,CAACqB,SAA7B,CAAf;AACAY,IAAAA,CAAC,CAACY,SAAF,CAAYJ,IAAZ,EAAkBG,QAAlB,EAA4B,sCAA5B;AACAX,IAAAA,CAAC,CAACI,GAAF;AACD,GAXH;AAYD,CAbD;AAiBA3C,IAAI,CAACqC,MAAL,CAAYC,EAAZ,CAAe,kBAAf,EAAmCC,CAAC,IAAI;AACpCpC,EAAAA,OAAO,CAACS,MAAD,CAAP,CACG4B,GADH,CACQ,cAAavB,IAAK,EAD1B,EAEGyB,MAFH,CAEU,GAFV,EAGGA,MAHH,CAGU,cAHV,EAG0B,MAH1B,EAIGC,GAJH,CAIO,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjBN,IAAAA,CAAC,CAACO,KAAF,CAAQF,GAAR,EAAa,4BAAb;AACA,QAAIG,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeJ,GAAG,CAACE,IAAnB,CAAX;AACA,QAAIG,QAAQ,GAAGF,IAAI,CAACC,SAAL,CAAe3C,aAAa,CAACwB,MAAd,CAAqBb,IAArB,CAAf,CAAf;AACAsB,IAAAA,CAAC,CAACY,SAAF,CAAYJ,IAAZ,EAAkBG,QAAlB,EAA4B,sCAA5B;AACAX,IAAAA,CAAC,CAACI,GAAF;AACD,GAVH;AAWH,CAZD;AAeA3C,IAAI,CAACqC,MAAL,CAAYe,IAAZ,CAAiB,8BAAjB;AAEApD,IAAI,CAACqC,MAAL,CAAYe,IAAZ,CAAiB,oBAAjB;AACApD,IAAI,CAACqC,MAAL,CAAYe,IAAZ,CAAiB,gCAAjB;AAEApD,IAAI,CAACqC,MAAL,CAAYe,IAAZ,CAAiB,0BAAjB;AACApD,IAAI,CAACqC,MAAL,CAAYe,IAAZ,CAAiB,sCAAjB","sourceRoot":"/home/juancho/Documentos/platzi/platziverse/platziverse-api","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst util = require ('util')\nconst request = require('supertest')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst agentFixtures = require('./fixtures/agent')\nconst config = require ('../config')\nconst auth = require ('../auth')\nconst sign = util.promisify(auth.sign)\n\nlet sandbox = null\nlet server = null\nlet dbStub = null\nlet AgentStub = {}\nlet token = {}\nlet MetricStub = {}\nconst uuid = 'yyy-yyy-yyy'\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  dbStub = sandbox.stub()\n  dbStub.returns(Promise.resolve({\n    Agent: AgentStub,\n    Metric: MetricStub,\n  }))\n\n  AgentStub.findConnected = sandbox.stub()\n  AgentStub.findConnected.returns(Promise.resolve(agentFixtures.connected))\n\n  AgentStub.findByUuid= sandbox.stub()\n  AgentStub.findByUuid.withArgs(uuid).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n\n  token = await sign({ admin: true, username: 'platzi'}, config.auth.secret)\n\n  const api = proxyquire('../api', {\n    'platziverse-db': dbStub\n  })\n\n  server = proxyquire('../server', {\n    './api': api\n  })\n})\n\ntest.afterEach(() => {\n  sandbox && sinon.restore()\n})\n\ntest.serial.cb('/api/agents', t => {\n  request(server)\n    .get('/api/agents')\n    .set('authorization', `Bearer ${token}`)\n    .expect(200)\n    .expect('Content-Type', /json/)\n    .end((err, res) => {\n      t.falsy(err, 'should not return an error')\n      let body = JSON.stringify(res.body)\n      let expected = JSON.stringify(agentFixtures.connected)\n      t.deepEqual(body, expected, 'response body should be the expected')\n      t.end()\n    })\n})\n\n\n\ntest.serial.cb('/api/agent/:uuid', t => {\n    request(server)\n      .get(`/api/agent/${uuid}`)\n      .expect(200)\n      .expect('Content-Type', /json/)\n      .end((err, res) => {\n        t.falsy(err, 'should not return an error')\n        let body = JSON.stringify(res.body)\n        let expected = JSON.stringify(agentFixtures.byUuid(uuid))\n        t.deepEqual(body, expected, 'response body should be the expected')\n        t.end()\n      })\n})\n\n\ntest.serial.todo('/api/agent/:uuid - not found')\n\ntest.serial.todo('/api/metrics/:uuid')\ntest.serial.todo('/api/metrics/:uuid - not found')\n\ntest.serial.todo('/api/metrics/:uuid/:type')\ntest.serial.todo('/api/metrics/:uuid/:type - not found')"]}