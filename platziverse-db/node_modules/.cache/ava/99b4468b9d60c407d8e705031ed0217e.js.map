{"version":3,"sources":["tests/agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","AgentStub","db","sandbox","beforeEach","createSandbox","hasMany","setupDatabase","afterEach","resetHistory","t","truthy","Agent","serial","true","called","calledWith","agent","findById","deepEqual","byId"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB,C,CACA;;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB,C,CACA;;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AAEA,MAAMG,aAAa,GAAGH,OAAO,CAAC,kBAAD,CAA7B;;AAEA,IAAII,MAAM,GAAG;AACXC,EAAAA,OAAO,GAAI,CAAE;;AADF,CAAb;AAIA,IAAIC,UAAU,GAAG;AACb;AACAC,EAAAA,SAAS,EAAEN,KAAK,CAACO,GAAN;AAFE,CAAjB;AAKA,IAAIC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,aAAa,CAACM,MAAhC,CAAb;AACA,IAAIG,EAAE,GAAG,CAAT;AACA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,EAAE,GAAG,IAAT,C,CACA;;AACA,IAAIC,OAAO,GAAG,IAAd;AAEAhB,IAAI,CAACiB,UAAL,CAAgB,YAAY;AAC1B;AACAD,EAAAA,OAAO,GAAGd,KAAK,CAACgB,aAAN,EAAV;AAEAJ,EAAAA,SAAS,GAAG;AACVK,IAAAA,OAAO,EAAEH,OAAO,CAACP,GAAR;AADC,GAAZ;AAIA,QAAMW,aAAa,GAAGjB,UAAU,CAAC,KAAD,EAAQ;AACtC,sBAAkB,MAAMW,SADc;AAEtC,uBAAmB,MAAMP;AAFa,GAAR,CAAhC,CAR0B,CAY1B;;AACAQ,EAAAA,EAAE,GAAG,MAAMK,aAAa,CAACf,MAAD,CAAxB;AACD,CAdD,E,CAgBA;;AACAL,IAAI,CAACqB,SAAL,CAAe,MAAM;AACnBL,EAAAA,OAAO,IAAId,KAAK,CAACoB,YAAN,EAAX;AACD,CAFD,E,CAIA;;AACAtB,IAAI,CAAC,OAAD,EAAUuB,CAAC,IAAI;AACjBA,EAAAA,CAAC,CAACC,MAAF,CAAST,EAAE,CAACU,KAAZ,EAAmB,4BAAnB;AACD,CAFG,CAAJ,C,CAIA;;AACAzB,IAAI,CAAC0B,MAAL,CAAY,OAAZ,EAAqBH,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACI,IAAF,CAAOb,SAAS,CAACK,OAAV,CAAkBS,MAAzB,EAAiC,iCAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOb,SAAS,CAACK,OAAV,CAAkBU,UAAlB,CAA6BtB,UAA7B,CAAP,EAAiD,oCAAjD;AACAgB,EAAAA,CAAC,CAACI,IAAF,CAAOpB,UAAU,CAACC,SAAX,CAAqBoB,MAA5B,EAAoC,oCAApC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOpB,UAAU,CAACC,SAAX,CAAqBqB,UAArB,CAAgCf,SAAhC,CAAP,EAAmD,mCAAnD;AACD,CALD;AAOAd,IAAI,CAAC0B,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAU;AACpC,MAAIO,KAAK,GAAG,MAAMf,EAAE,CAACe,KAAH,CAASC,QAAT,CAAkBlB,EAAlB,CAAlB;AACAU,EAAAA,CAAC,CAACS,SAAF,CAAYF,KAAZ,EAAmB1B,aAAa,CAAC6B,IAAd,CAAmBpB,EAAnB,CAAnB,EAA2C,mBAA3C;AACH,CAHD","sourceRoot":"/home/juancho/Documentos/platzi/platziverse/platziVerse-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\n//generar pruebas ficticias\nconst sinon = require('sinon')\n//reemplazar el require por unas rutas ficticias\nconst proxyquire = require('proxyquire')\n\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n  logging () {}\n}\n\nlet MetricStub = {\n    //cuantas veces fe usada la funcion con sinon.spy\n    belongsTo: sinon.spy()\n}\n\nlet single = Object.assign({}, agentFixtures.single)\nlet id = 1 \nlet AgentStub = null\nlet db = null\n//sinons que se reinician\nlet sandbox = null\n\ntest.beforeEach(async () => {\n  //prueba que funciona dentro de un scope y se reinicia\n  sandbox = sinon.createSandbox()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  // la base de datos recibe el config\n  db = await setupDatabase(config)\n})\n\n//reiniciar los sandbox y sinon por text\ntest.afterEach(() => {\n  sandbox && sinon.resetHistory()\n})\n\n// test la base de datos recibe un agente\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\n//test en serie no paralelo\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\n})\n\ntest.serial('Agent#findById', async t =>{\n    let agent = await db.agent.findById(id)\n    t.deepEqual(agent, agentFixtures.byId(id), 'should be de same')\n})"]}