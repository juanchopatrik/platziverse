'use strict';

const test = require('ava'); //generar pruebas ficticias


const sinon = require('sinon'); //reemplazar el require por unas rutas ficticias


const proxyquire = require('proxyquire');

const agentFixtures = require('./fixtures/agent');

let config = {
  logging() {}

};
let MetricStub = {
  //cuantas veces fe usada la funcion con sinon.spy
  belongsTo: sinon.spy()
};
let single = Object.assign({}, agentFixtures.single);
let id = 1;
let AgentStub = null;
let db = null; //sinons que se reinician

let sandbox = null;
test.beforeEach(async () => {
  //prueba que funciona dentro de un scope y se reinicia
  sandbox = sinon.createSandbox();
  AgentStub = {
    hasMany: sandbox.spy()
  }; //Model findById Stub

  AgentStub.findById = sandbox.stub();
  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)));
  const setupDatabase = proxyquire('../', {
    './models/agent': () => AgentStub,
    './models/metric': () => MetricStub
  }); // la base de datos recibe el config

  db = await setupDatabase(config);
}); //reiniciar los sandbox y sinon por text

test.afterEach(() => {
  sandbox && sinon.resetHistory();
}); // test la base de datos recibe un agente

test('Agent', t => {
  t.truthy(db.Agent, 'Agent service should exist');
}); //test en serie no paralelo

test.serial('Setup', t => {
  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed');
  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel');
  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed');
  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel');
});
test.serial('Agent#findById', async t => {
  let agent = await db.Agent.findById(id);
  t.true(AgentStub.findById.called, 'findById should be called on model');
  t.true(AgentStub.findById.calledOnce, 'findById should be called once');
  t.true(AgentStub.findById.calledWith(id), 'findById should be called with specified id');
  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same');
});
//# sourceMappingURL=/home/juancho/Documentos/platzi/platziverse/platziVerse-db/node_modules/.cache/ava/d1d621a7a37d8c1e071f9bc18d4ba3a8.js.map