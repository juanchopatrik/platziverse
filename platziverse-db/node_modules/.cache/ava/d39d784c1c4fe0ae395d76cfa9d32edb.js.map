{"version":3,"sources":["tests/agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","uuid","AgentStub","db","sandbox","uuidArgs","where","beforeEach","createSandbox","hasMany","update","stub","withArgs","returns","Promise","resolve","findById","byId","findOne","byUuid","setupDatabase","afterEach","resetHistory","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate","calledTwice"],"mappings":"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","sourceRoot":"/home/juancho/Documentos/platzi/platziverse/platziVerse-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\n//generar pruebas ficticias\nconst sinon = require('sinon')\n//reemplazar el require por unas rutas ficticias\nconst proxyquire = require('proxyquire')\n\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n  logging () {}\n}\n\nlet MetricStub = {\n    //cuantas veces fe usada la funcion con sinon.spy\n    belongsTo: sinon.spy()\n}\n//clonamos el objeto single\nlet single = Object.assign({}, agentFixtures.single)\nlet id = 1 \nlet uuid = 'yyy-yyy-yyy'\nlet AgentStub = null\nlet db = null\n//sinons que se reinician\nlet sandbox = null\n\nlet uuidArgs = {\n  where : {uuid}\n}\n\ntest.beforeEach(async () => {\n  //prueba que funciona dentro de un scope y se reinicia\n  sandbox = sinon.createSandbox()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  //Model update Stub\n  AgentStub.update= sandbox.stub()\n  AgentStub.update.withArgs(single,uuidArgs).returns(Promise.resolve(single))\n\n  //Model findById Stub\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\n\n  // Model findOne Stub\n  AgentStub.findOne= sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  // la base de datos recibe el config\n  db = await setupDatabase(config)\n})\n\n//reiniciar los sandbox y sinon por text\ntest.afterEach(() => {\n  sandbox && sinon.resetHistory()\n})\n\n// test la base de datos recibe un agente\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\n//test en serie no paralelo\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\n})\n\ntest.serial('Agent#findById', async t =>{\n    let agent = await db.Agent.findById(id)\n    t.true(AgentStub.findById.called, 'findById should be called on model')\n    t.true(AgentStub.findById.calledOnce, 'findById Should be called once')\n    t.true(AgentStub.findById.calledWith(id), 'findById should be called with specific id')\n\n    t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\n})\n\ntest.serial('Agent#createOrupdate-exists', async t=>{\n  let agent = await db.Agent.createOrUpdate(single)\n\n  t.true(AgentStub.findOne.called,'findOne should be called on model')\n  t.true(AgentStub.findOne.calledTwice,'findOne should be called twice')\n  t.true(AgentStub.findOne.calledWith(uuidArgs),'findOne should be called with uuid args')\n  t.true(AgentStub.update.called, 'agent.update called on model')\n  t.true(AgentStub.update.calledOnce, 'agent.update should be called once')\n  t.true(AgentStub.update.calledWith(single), 'agent.update should be called with specified args')\n\n  t.deepEqual(agent, single, 'agent Should be the same')\n})"]}